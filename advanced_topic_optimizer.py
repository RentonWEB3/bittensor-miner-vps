#!/usr/bin/env python3.11
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ç–µ–º –¥–ª—è –º–∞–π–Ω–µ—Ä–∞
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞—à–±–æ—Ä–¥, Dynamic Desirability –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
"""

import json
import requests
import pandas as pd
import logging
from typing import List, Dict, Tuple
from pathlib import Path
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AdvancedTopicOptimizer:
    def __init__(self):
        self.dashboard_url = "https://sn13-dashboard.api.macrocosmos.ai"
        self.gravity_api_url = "https://gravity.api.macrocosmos.ai/api/v1/desirable"
        self.csv_file = "2025-08-24T13-15_export.csv"
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
        self.topic_categories = {
            "crypto_ai": ["bitcoin", "ethereum", "ai", "artificialintelligence", "machinelearning", "crypto", "blockchain"],
            "tech": ["technology", "programming", "software", "hardware", "gaming", "esports"],
            "finance": ["investing", "stocks", "finance", "trading", "wallstreetbets", "cryptocurrency"],
            "news": ["news", "politics", "worldnews", "technology", "science"],
            "entertainment": ["movies", "music", "gaming", "sports", "entertainment"],
            "lifestyle": ["fitness", "health", "food", "travel", "lifestyle"]
        }
        
        # –¢–µ–º—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–æ—Å—Ç–æ–º (–∏–∑ CSV)
        self.high_growth_reddit = [
            "r/askreddit", "r/amioverreacting", "r/aitah", "r/nostupidquestions", 
            "r/politics", "r/teenagers", "r/wallstreetbets", "r/relationship_advice",
            "r/teenagersbutbetter", "r/market76", "r/helldivers", "r/genshin_impact_leaks",
            "r/growagarden", "r/productivitycafe", "r/nightreign", "r/originalcharacter"
        ]
        
        self.high_growth_twitter = [
            "tesla", "electricvehicles", "solar", "technology", "ai", "crypto",
            "bitcoin", "ethereum", "artificialintelligence", "machinelearning"
        ]

    def fetch_dashboard_data(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—à–±–æ—Ä–¥–∞"""
        logger.info("üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—à–±–æ—Ä–¥–∞...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
            response = requests.get(f"{self.dashboard_url}/api/top-labels", timeout=10)
            if response.status_code == 200:
                data = response.json()
                return pd.DataFrame(data)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API: {e}")
        
        # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º CSV —Ñ–∞–π–ª
        try:
            if Path(self.csv_file).exists():
                df = pd.read_csv(self.csv_file)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ CSV")
                return df
            else:
                logger.warning(f"CSV —Ñ–∞–π–ª {self.csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return pd.DataFrame()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
            return pd.DataFrame()

    def fetch_dynamic_desirability(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ–º Dynamic Desirability —Ç–µ–º—ã"""
        logger.info("‚≠ê –ü–æ–ª—É—á–∞–µ–º Dynamic Desirability...")
        
        try:
            response = requests.get(self.gravity_api_url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if isinstance(data, list):
                    return data[:10]  # –ë–µ—Ä–µ–º —Ç–æ–ø-10
                elif isinstance(data, dict) and 'topics' in data:
                    return data['topics'][:10]
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Dynamic Desirability: {e}")
        
        # Fallback —Ç–µ–º—ã
        return ["tesla", "ai", "crypto", "bitcoin", "technology"]

    def analyze_dashboard_data(self, df: pd.DataFrame) -> Tuple[List[str], List[str]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ —Ç–µ–º—ã"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞...")
        
        if df.empty:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return self.high_growth_reddit[:5], self.high_growth_twitter[:5]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É
        reddit_data = df[df['source'] == 'reddit'].copy()
        twitter_data = df[df['source'] == 'x'].copy()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É –¥–∞–Ω–Ω—ã—Ö
        reddit_top = reddit_data.nlargest(10, 'size collected')
        twitter_top = twitter_data.nlargest(10, 'size collected')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—ã
        reddit_topics = []
        for _, row in reddit_top.iterrows():
            label = row['label']
            if pd.notna(label) and label != 'NULL':
                # –£–±–∏—Ä–∞–µ–º r/ –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                clean_label = label.replace('r/', '') if label.startswith('r/') else label
                reddit_topics.append(clean_label)
        
        twitter_topics = []
        for _, row in twitter_top.iterrows():
            label = row['label']
            if pd.notna(label) and label != 'NULL':
                # –£–±–∏—Ä–∞–µ–º # –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                clean_label = label.replace('#', '') if label.startswith('#') else label
                twitter_topics.append(clean_label)
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(reddit_topics)} —Ç–æ–ø Reddit —Ç–µ–º")
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(twitter_topics)} —Ç–æ–ø Twitter —Ç–µ–º")
        
        return reddit_topics[:5], twitter_topics[:5]

    def get_category_topics(self) -> Tuple[List[str], List[str]]:
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        logger.info("üìÇ –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ –æ–¥–Ω–æ–π —Ç–µ–º–µ –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        reddit_categories = []
        twitter_categories = []
        
        for category, topics in self.topic_categories.items():
            if topics:
                # –î–ª—è Reddit –¥–æ–±–∞–≤–ª—è–µ–º r/ –ø—Ä–µ—Ñ–∏–∫—Å
                reddit_topic = f"r/{topics[0]}" if topics[0] not in ['ai', 'crypto'] else topics[0]
                reddit_categories.append(reddit_topic)
                
                # –î–ª—è Twitter –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                twitter_categories.append(topics[0])
        
        return reddit_categories[:5], twitter_categories[:5]

    def combine_topics(self, dashboard_reddit: List[str], dashboard_twitter: List[str], 
                      desirability: List[str], category_reddit: List[str], 
                      category_twitter: List[str]) -> Tuple[List[str], List[str]]:
        """–ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ç–µ–º—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        logger.info("üîÑ –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ç–µ–º—ã...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        final_reddit = []
        final_twitter = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞ (40%)
        final_reddit.extend(dashboard_reddit)
        final_twitter.extend(dashboard_twitter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º Dynamic Desirability (30%)
        for topic in desirability:
            if topic not in final_reddit and len(final_reddit) < 10:
                final_reddit.append(topic)
            if topic not in final_twitter and len(final_twitter) < 10:
                final_twitter.append(topic)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã–µ —Ç–µ–º—ã (30%)
        for topic in category_reddit:
            if topic not in final_reddit and len(final_reddit) < 10:
                final_reddit.append(topic)
        
        for topic in category_twitter:
            if topic not in final_twitter and len(final_twitter) < 10:
                final_twitter.append(topic)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        final_reddit = list(dict.fromkeys(final_reddit))
        final_twitter = list(dict.fromkeys(final_twitter))
        
        logger.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ Reddit —Ç–µ–º—ã: {final_reddit}")
        logger.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ Twitter —Ç–µ–º—ã: {final_twitter}")
        
        return final_reddit[:10], final_twitter[:10]

    def create_optimized_config(self, reddit_topics: List[str], twitter_topics: List[str]) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        logger.info("‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º r/ –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è Reddit —Ç–µ–º, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        reddit_with_prefix = []
        for topic in reddit_topics:
            if not topic.startswith('r/') and not topic.startswith('#'):
                reddit_with_prefix.append(f"r/{topic}")
            else:
                reddit_with_prefix.append(topic)
        
        config = {
            "scraper_configs": [
                {
                    "scraper_id": "X.microworlds",
                    "cadence_seconds": 300,  # 5 –º–∏–Ω—É—Ç
                    "labels_to_scrape": [
                        {
                            "label_choices": twitter_topics,
                            "max_age_hint_minutes": 1440,  # 24 —á–∞—Å–∞
                            "max_data_entities": 10
                        }
                    ],
                    "config": {
                        "cookies_path": "twitter_cookies.json"
                    }
                },
                {
                    "scraper_id": "Reddit.custom",
                    "cadence_seconds": 900,  # 15 –º–∏–Ω—É—Ç
                    "labels_to_scrape": [
                        {
                            "label_choices": reddit_with_prefix,
                            "max_age_hint_minutes": 1440,  # 24 —á–∞—Å–∞
                            "max_data_entities": 200
                        }
                    ],
                    "config": {
                        "subreddit": "all",
                        "limit_per_label": 100
                    }
                }
            ]
        }
        
        return config

    def backup_current_config(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if Path("scraping_config_gravity.json").exists():
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_name = f"scraping_config_backup_{timestamp}.json"
                import shutil
                shutil.copy("scraping_config_gravity.json", backup_name)
                logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

    def update_config(self, config: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open("scraping_config_optimized.json", "w") as f:
                json.dump(config, f, indent=2)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            import shutil
            shutil.copy("scraping_config_optimized.json", "scraping_config_gravity.json")
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: scraping_config_gravity.json")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

    def optimize_topics(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç–µ–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        dashboard_df = self.fetch_dashboard_data()
        desirability_topics = self.fetch_dynamic_desirability()
        dashboard_reddit, dashboard_twitter = self.analyze_dashboard_data(dashboard_df)
        category_reddit, category_twitter = self.get_category_topics()
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ç–µ–º—ã
        final_reddit, final_twitter = self.combine_topics(
            dashboard_reddit, dashboard_twitter, desirability_topics,
            category_reddit, category_twitter
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.create_optimized_config(final_reddit, final_twitter)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self.backup_current_config()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if self.update_config(config):
            logger.info("üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìã Reddit —Ç–µ–º—ã: {final_reddit}")
            logger.info(f"üìã Twitter —Ç–µ–º—ã: {final_twitter}")
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    optimizer = AdvancedTopicOptimizer()
    success = optimizer.optimize_topics()
    
    if success:
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞–π–Ω–µ—Ä —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
        print("2. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-4 —á–∞—Å–æ–≤")
        print("3. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 6-12 —á–∞—Å–æ–≤")
        print("4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç–µ–º")
    else:
        print("\n‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

if __name__ == "__main__":
    main()
