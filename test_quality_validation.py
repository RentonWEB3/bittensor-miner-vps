#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
–±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Twitter API
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–µ–º—É –º–æ–¥—É–ª—é
sys.path.append('.')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–µ—Ä–∞
from twikit_scraper_improved import (
    is_english, 
    is_spam_or_low_quality, 
    is_relevant_to_topic, 
    has_quality_indicators
)

class MockTweet:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–≤–∏—Ç–∞"""
    def __init__(self, text, likes=0, retweets=0):
        self.text = text
        self.favorite_count = likes
        self.retweet_count = retweets

def test_english_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    print("=== –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ ===")
    
    test_cases = [
        ("This is a great electric vehicle announcement!", True),
        ("@haciykk Mƒ±llet d√º≈üm√º≈ü ge√ßim derdine devlet d√º≈üm√º≈ü", False),  # –¢—É—Ä–µ—Ü–∫–∏–π
        ("‡§≠‡§æ‡§∞‡§§ ‡§Ö‡§¨ ‡§∏‡§ø‡§∞‡•ç‡§´ target ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ", False),  # –•–∏–Ω–¥–∏
        ("Electric cars are the future of transportation", True),
        ("123 !@# ???", False),  # –ù–µ—Ç –±—É–∫–≤
        ("", False),  # –ü—É—Å—Ç–æ–π
    ]
    
    for text, expected in test_cases:
        result = is_english(text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{text[:50]}...' -> {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")

def test_spam_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞"""
    print("\n=== –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–º–∞ ===")
    
    test_cases = [
        ("Short", True),  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        ("@someone reply without context", True),  # Reply
        ("üöóüöóüöóüöóüöóüöóüöóüöóüöóüöóüöóüöóüöóüöóüöóüöóüöóüöóüöóüöóüöó", True),  # –ú–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
        ("aaaaaaaaaa repeated characters", True),  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        ("#tag1 #tag2 #tag3 #tag4 #tag5 #tag6 #tag7", True),  # –ú–Ω–æ–≥–æ —Ö—ç—à—Ç–µ–≥–æ–≤
        ("This is a normal high-quality tweet about electric vehicles and their impact on environment", False),  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π
    ]
    
    for text, expected in test_cases:
        result = is_spam_or_low_quality(text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{text[:50]}...' -> {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")

def test_relevance_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
    print("\n=== –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ ===")
    
    test_cases = [
        ("Tesla Model 3 is amazing electric vehicle", "ev", True),
        ("I love pizza and cats", "ev", False),
        ("Solar panels are great for renewable energy", "greenenergy", True),
        ("Climate change is affecting our planet", "climatechange", True),
        ("Just had lunch with friends", "sustainability", False),
        ("Battery technology is improving rapidly", "battery", True),
    ]
    
    for text, topic, expected in test_cases:
        result = is_relevant_to_topic(text, topic)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{text[:30]}...' –¥–ª—è '{topic}' -> {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")

def test_quality_indicators():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("\n=== –¢–µ—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ ===")
    
    test_cases = [
        (MockTweet("Great tweet", likes=5, retweets=2), True),
        (MockTweet("Another great tweet", likes=0, retweets=3), True),
        (MockTweet("Low quality", likes=1, retweets=0), False),
        (MockTweet("No engagement", likes=0, retweets=0), False),
    ]
    
    for tweet, expected in test_cases:
        result = has_quality_indicators(tweet)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{tweet.text}' (‚ù§Ô∏è{tweet.favorite_count} üîÑ{tweet.retweet_count}) -> {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞\n")
    
    test_english_detection()
    test_spam_detection()
    test_relevance_detection()
    test_quality_indicators()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\n–ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –¥–µ–ø–ª–æ—é –Ω–∞ VPS.")

if __name__ == "__main__":
    main()
