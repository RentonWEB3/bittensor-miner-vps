#!/usr/bin/env python3

import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'rewards'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'dynamic_desirability'))

from rewards.data import Job, JobMatcher

def test_job_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é Job —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ total.json
    try:
        with open('dynamic_desirability/total.json', 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª total.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ total.json")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
    for i, item in enumerate(data[:5]):
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å {i+1}:")
        print(f"   ID: {item.get('id')}")
        print(f"   Weight: {item.get('weight')}")
        print(f"   Params: {item.get('params')}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º Job –æ–±—ä–µ–∫—Ç
            job = Job(
                id=item.get('id'),
                keyword=item.get('params', {}).get('keyword') or "",
                label=item.get('params', {}).get('label') or "default",
                job_weight=item.get('weight'),
                start_timebucket=None,
                end_timebucket=None
            )
            print(f"   ‚úÖ Job —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {job}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Job: {e}")
            print(f"   üîç –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
            print(f"      id: {type(item.get('id'))} = {item.get('id')}")
            print(f"      keyword: {type(item.get('params', {}).get('keyword'))} = {item.get('params', {}).get('keyword')}")
            print(f"      label: {type(item.get('params', {}).get('label'))} = {item.get('params', {}).get('label')}")
            print(f"      weight: {type(item.get('weight'))} = {item.get('weight')}")

if __name__ == "__main__":
    test_job_validation()
