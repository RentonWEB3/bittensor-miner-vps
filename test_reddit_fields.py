#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π Reddit —Å–∫—Ä–∞–ø–µ—Ä–∞
"""

import sys
import json
import datetime as dt
sys.path.append('.')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Reddit –º–æ–¥–µ–ª—å
from scraping.reddit.model import RedditContent, RedditDataType

def test_reddit_required_fields():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è Reddit"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π Reddit")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Reddit
    test_reddit_data = [
        {
            "id": "abc123",
            "url": "https://reddit.com/r/teslamotors/comments/abc123/tesla_model_3_review/",
            "username": "tesla_fan",
            "communityName": "r/teslamotors",
            "body": "Amazing review of the Tesla Model 3! The acceleration is incredible.",
            "createdAt": dt.datetime(2025, 8, 24, 15, 30, 0, tzinfo=dt.timezone.utc),
            "dataType": RedditDataType.POST,
            "title": "Tesla Model 3 Review - Incredible Performance",
            "media": ["https://i.redd.it/tesla_model_3.jpg"],
            "is_nsfw": False
        },
        {
            "id": "def456",
            "url": "https://reddit.com/r/electricvehicles/comments/def456/solar_panels_installation/",
            "username": "solar_expert",
            "communityName": "r/electricvehicles", 
            "body": "Just installed solar panels on my roof. The energy savings are incredible!",
            "createdAt": dt.datetime(2025, 8, 24, 16, 0, 0, tzinfo=dt.timezone.utc),
            "dataType": RedditDataType.POST,
            "title": "Solar Panels Installation Complete",
            "media": [],
            "is_nsfw": False
        },
        {
            "id": "ghi789",
            "url": "https://reddit.com/r/teslamotors/comments/ghi789/comment_on_tesla_post/",
            "username": "ev_enthusiast",
            "communityName": "r/teslamotors",
            "body": "Great post! Tesla is really leading the EV revolution.",
            "createdAt": dt.datetime(2025, 8, 24, 16, 30, 0, tzinfo=dt.timezone.utc),
            "dataType": RedditDataType.COMMENT,
            "parentId": "abc123",
            "media": [],
            "is_nsfw": False
        }
    ]
    
    for i, data in enumerate(test_reddit_data, 1):
        print(f"\nüìù –¢–µ—Å—Ç Reddit #{i}:")
        print(f"–¢–∏–ø: {data['dataType']}")
        print(f"–°–æ–æ–±—â–µ—Å—Ç–≤–æ: {data['communityName']}")
        print(f"Username: {data['username']}")
        print(f"URL: {data['url']}")
        print(f"–¢–µ–∫—Å—Ç: {data['body'][:50]}...")
        
        # –°–æ–∑–¥–∞–µ–º RedditContent –æ–±—ä–µ–∫—Ç
        try:
            reddit_content = RedditContent(**data)
            print(f"‚úÖ RedditContent —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_fields = {
                "id": bool(reddit_content.id),
                "url": bool(reddit_content.url),
                "username": bool(reddit_content.username),
                "community": bool(reddit_content.community),
                "body": bool(reddit_content.body),
                "created_at": bool(reddit_content.created_at),
                "data_type": bool(reddit_content.data_type)
            }
            
            print(f"üîç –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:")
            for field, filled in required_fields.items():
                status = "‚úÖ" if filled else "‚ùå"
                print(f"   {status} {field}: {'–∑–∞–ø–æ–ª–Ω–µ–Ω–æ' if filled else '–ü–£–°–¢–û!'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
            if reddit_content.data_type == RedditDataType.POST:
                print(f"   üìã title: {reddit_content.title or '–ù–ï–¢'}")
            elif reddit_content.data_type == RedditDataType.COMMENT:
                print(f"   üìã parent_id: {reddit_content.parent_id or '–ù–ï–¢'}")
            
            # –°–æ–∑–¥–∞–µ–º DataEntity
            data_entity = RedditContent.to_data_entity(reddit_content)
            print(f"‚úÖ DataEntity —Å–æ–∑–¥–∞–Ω: {data_entity.uri}")
            print(f"   –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {data_entity.content_size_bytes} –±–∞–π—Ç")
            print(f"   Label: {data_entity.label.value}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RedditContent: {e}")
    
    print(f"\nüéØ **–í–ê–ñ–ù–û**: Reddit –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö!")
    print("üìö –ò–∑ scraping/reddit/model.py:")
    print("   –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è RedditContent:")
    print("   - id: str")
    print("   - url: str") 
    print("   - username: str")
    print("   - community: str")
    print("   - body: str")
    print("   - created_at: datetime")
    print("   - data_type: RedditDataType")
    print("\n‚úÖ Reddit –∏ Twitter –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")

def test_reddit_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é Reddit URL"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Reddit URL:")
    
    from scraping.reddit.utils import is_valid_reddit_url
    
    test_urls = [
        "https://reddit.com/r/teslamotors/comments/abc123/tesla_model_3_review/",
        "https://www.reddit.com/r/electricvehicles/comments/def456/solar_panels/",
        "https://old.reddit.com/r/tesla/comments/ghi789/",
        "https://example.com/not_reddit",
        "invalid_url"
    ]
    
    for url in test_urls:
        is_valid = is_valid_reddit_url(url)
        status = "‚úÖ" if is_valid else "‚ùå"
        print(f"{status} {url}")

if __name__ == "__main__":
    test_reddit_required_fields()
    test_reddit_validation()
