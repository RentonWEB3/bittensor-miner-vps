#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏—Ö)
"""

import sys
sys.path.append('.')

from twikit_scraper import (
    is_english_basic, 
    is_basic_spam, 
    is_relevant_basic, 
    is_valid_quality_tweet,
    extract_hashtags,
    extract_urls
)

class MockTweet:
    def __init__(self, text, username="test_user", tweet_id="12345"):
        self.text = text
        self.username = username
        self.id = tweet_id

def test_fixed_filters():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏—Ö)")
    print("=" * 60)
    
    # –¢–µ—Å—Ç—ã —è–∑—ã–∫–∞ (–º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ)
    print("\nüìù –¢–µ—Å—Ç —è–∑—ã–∫–∞ (—Å–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –¥–æ 60%):")
    test_cases = [
        ("Electric cars are the future", True),  # 100% –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        ("Tesla Model 3 is amazing! üöó", True),  # ~90% –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        ("EV charging @TeslaMotors rocks!", True),  # ~85% –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        ("Solar energy is clean power", True),  # 100% –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        ("–º—ã –ª—é–±–∏–º Tesla cars", False),  # ~50% –∞–Ω–≥–ª–∏–π—Å–∫–∏–π - –ù–ï –ü–†–û–ô–î–ï–¢
        ("„Åß„Åç„Åü„Äú„ÄÇ1ÂÄãÁõÆ„Çà„ÇäË∂≥Èï∑„Åè„Å™„Å£„Åü„ÄÇ", False),  # –Ø–ø–æ–Ω—Å–∫–∏–π - –ù–ï –ü–†–û–ô–î–ï–¢
    ]
    
    for text, expected in test_cases:
        result = is_english_basic(text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{text}' -> {result}")
    
    # –¢–µ—Å—Ç—ã —Å–ø–∞–º–∞ (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏)
    print("\nüóëÔ∏è –¢–µ—Å—Ç —Å–ø–∞–º–∞ (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ):")
    spam_cases = [
        ("Short", True),  # –ú–µ–Ω—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ - –°–ü–ê–ú
        ("Normal tweet about electric vehicles and future", False),  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π
        ("aaaaaaaaaaaaa spam", True),  # 10+ –ø–æ–≤—Ç–æ—Ä–æ–≤ - –°–ü–ê–ú 
        ("Tesla model 3 rocks", False),  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π
        ("#" * 11 + " too many hashtags", True),  # 11 —Ö—ç—à—Ç–µ–≥–æ–≤ - –°–ü–ê–ú
        ("Great EV news #tesla #ev #green", False),  # 3 —Ö—ç—à—Ç–µ–≥–∞ - –û–ö
    ]
    
    for text, expected in spam_cases:
        result = is_basic_spam(text)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{text[:40]}...' -> {result}")
    
    # –¢–µ—Å—Ç—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã)
    print("\nüéØ –¢–µ—Å—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã):")
    relevance_cases = [
        ("Tesla Model 3 is amazing", "tesla", True),  # –ü—Ä—è–º–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        ("Electric vehicle charging is fast", "ev", True),  # –°–∏–Ω–æ–Ω–∏–º
        ("Solar power plants are efficient", "greenenergy", True),  # –°–∏–Ω–æ–Ω–∏–º  
        ("Battery technology improves daily", "ev", True),  # –°–≤—è–∑–∞–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω
        ("I love pizza and cats", "ev", False),  # –ù–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ
        ("Unknown topic example", "unknowntopic", True),  # –ù–µ—Ç —Å–∏–Ω–æ–Ω–∏–º–æ–≤ = –û–ö
    ]
    
    for text, topic, expected in relevance_cases:
        result = is_relevant_basic(text, topic)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{text}' –¥–ª—è '{topic}' -> {result}")
    
    # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("\nüîç –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤ –∏ URL:")
    data_cases = [
        ("Great #Tesla #EV news!", ["#Tesla", "#EV"]),
        ("Check this https://twitter.com/tesla/status/123", ["https://twitter.com/tesla/status/123"]),
        ("Solar power #clean #energy https://example.com", ["#clean", "#energy"]),
    ]
    
    for text, expected_tags in data_cases:
        hashtags = extract_hashtags(text)
        urls = extract_urls(text)
        print(f"üìù '{text}'")
        print(f"   –•—ç—à—Ç–µ–≥–∏: {hashtags}")
        print(f"   URL: {urls}")
    
    # –û–±—â–∏–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    print("\nüéØ –û–±—â–∏–π —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
    tweets = [
        MockTweet("Tesla Model 3 performance is incredible #EV"),
        MockTweet("Solar panels are getting more efficient"),
        MockTweet("Short"),  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
        MockTweet("–º—ã –ª—é–±–∏–º Tesla"),  # –ù–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        MockTweet("Electric vehicle charging infrastructure growing #EV #Tesla"),
    ]
    
    topics = ["tesla", "greenenergy", "ev", "ev", "ev"]
    
    for i, (tweet, topic) in enumerate(zip(tweets, topics)):
        result = is_valid_quality_tweet(tweet, topic)
        print(f"üìã –¢–≤–∏—Ç {i+1}: {result} - '{tweet.text}'")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üéØ –û–∂–∏–¥–∞–µ—Ç—Å—è: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å 14% –¥–æ 60-80%")

if __name__ == "__main__":
    test_fixed_filters()
