#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Dynamic Desirability
"""

import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

def test_job_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Job —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
    from dynamic_desirability.data import Job, JobParams
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_job_data = {
        'id': 'test_job_1',
        'weight': 1.5,
        'params': {
            'keyword': 'bitcoin',
            'platform': 'reddit',
            'label': 'r/bitcoin',
            'post_start_datetime': '2025-08-24T00:00:00',
            'post_end_datetime': '2025-08-24T23:59:59'
        }
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º JobParams
        job_params = JobParams(
            keyword=test_job_data['params'].get('keyword'),
            platform=test_job_data['params'].get('platform'),
            label=test_job_data['params'].get('label'),
            post_start_datetime=test_job_data['params'].get('post_start_datetime'),
            post_end_datetime=test_job_data['params'].get('post_end_datetime')
        )
        
        # –°–æ–∑–¥–∞–µ–º Job
        job = Job(
            id=test_job_data['id'],
            weight=test_job_data['weight'],
            params=job_params
        )
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç Job:")
        print(f"   ID: {job.id}")
        print(f"   Weight: {job.weight}")
        print(f"   Platform: {job.params.platform}")
        print(f"   Label: {job.params.label}")
        print(f"   Keyword: {job.params.keyword}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Job: {e}")
        return False

def test_job_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é Job —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    from dynamic_desirability.data import Job, JobParams
    
    test_cases = [
        {
            'name': '–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
            'data': {
                'id': 'valid_job',
                'weight': 1.0,
                'params': {
                    'platform': 'reddit',
                    'label': 'r/bitcoin'
                }
            },
            'should_pass': True
        },
        {
            'name': '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID —Å —Å–ª–µ—à–µ–º',
            'data': {
                'id': 'invalid/id',
                'weight': 1.0,
                'params': {
                    'platform': 'reddit',
                    'label': 'r/bitcoin'
                }
            },
            'should_pass': False
        },
        {
            'name': '–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞',
            'data': {
                'id': 'valid_job',
                'weight': 1.0,
                'params': {
                    'platform': 'invalid_platform',
                    'label': 'r/bitcoin'
                }
            },
            'should_pass': False
        }
    ]
    
    for test_case in test_cases:
        try:
            job_params = JobParams(**test_case['data']['params'])
            job = Job(**test_case['data'])
            
            if test_case['should_pass']:
                print(f"‚úÖ {test_case['name']}: –£—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå {test_case['name']}: –î–æ–ª–∂–µ–Ω –±—ã–ª —É–ø–∞—Å—Ç—å, –Ω–æ –ø—Ä–æ—à–µ–ª")
                
        except Exception as e:
            if test_case['should_pass']:
                print(f"‚ùå {test_case['name']}: –£–ø–∞–ª, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–æ–π—Ç–∏ - {e}")
            else:
                print(f"‚úÖ {test_case['name']}: –û–∂–∏–¥–∞–µ–º–æ —É–ø–∞–ª - {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Dynamic Desirability\n")
    
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è Job:")
    test_job_creation()
    
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Job:")
    test_job_validation()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å Job –≤ desirability_retrieval.py")
    print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω union type –¥–ª—è Python 3.9")
    print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç JobParams")
    print("   ‚ö†Ô∏è  JobMatcher —Ç—Ä–µ–±—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π –º–æ–¥–µ–ª—å—é Job")
