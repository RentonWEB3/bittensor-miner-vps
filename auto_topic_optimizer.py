#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ç–µ–º –¥–ª—è –º–∞–π–Ω–µ—Ä–∞ Macrocosm
–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç Dynamic Desirability –∏ Dashboard –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""

import json
import requests
import pandas as pd
import time
import logging
from typing import List, Dict, Tuple
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TopicOptimizer:
    def __init__(self):
        self.dashboard_url = "https://sn13-dashboard.api.macrocosmos.ai/"
        self.gravity_url = "https://gravity.api.macrocosmos.ai/api/desirability"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π URL
        self.config_file = "scraping_config_optimized.json"
        self.backup_file = "scraping_config_backup.json"
        
    def fetch_dashboard_data(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—à–±–æ—Ä–¥–∞
            response = requests.get(f"{self.dashboard_url}/api/stats", timeout=10)
            if response.status_code == 200:
                data = response.json()
                return pd.DataFrame(data)
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—à–±–æ—Ä–¥–∞: {response.status_code}")
                return pd.DataFrame()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            return pd.DataFrame()
    
    def fetch_dynamic_desirability(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º—ã—Ö —Ç–µ–º –∏–∑ Dynamic Desirability"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Gravity API
            response = requests.get(self.gravity_url, timeout=10)
            if response.status_code == 200:
                data = response.json()
                return data.get('desirable_topics', [])
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Dynamic Desirability: {response.status_code}")
                return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Dynamic Desirability: {e}")
            return []
    
    def analyze_dashboard_data(self, df: pd.DataFrame) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —Ç–µ–º"""
        if df.empty:
            return {}
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–æ—Å—Ç–∞
        topic_scores = {}
        
        for _, row in df.iterrows():
            label = row.get('label', '')
            size_gb = row.get('size collected', 0)
            growth = row.get('vs. previous day', 0)
            
            if label and label != 'NULL':
                # –û—Ü–µ–Ω–∫–∞: –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö = –ª—É—á—à–µ, –±–æ–ª—å—à–µ —Ä–æ—Å—Ç–∞ = –ª—É—á—à–µ
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–º–µ—Ä (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
                size_score = max(0, 100 - size_gb) / 100
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–æ—Å—Ç (–±–æ–ª—å—à–µ = –ª—É—á—à–µ)
                growth_score = min(1.0, max(0, growth) / 100)
                
                # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
                total_score = (size_score * 0.7) + (growth_score * 0.3)
                topic_scores[label] = total_score
        
        return topic_scores
    
    def combine_topics(self, dashboard_scores: Dict[str, float], 
                      desirability_topics: List[str]) -> List[str]:
        """–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Ç–µ–º—ã –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        combined_topics = []
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –∏–∑ Dynamic Desirability (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        for topic in desirability_topics:
            if topic not in combined_topics:
                combined_topics.append(topic)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ–º–∞ –∏–∑ Dynamic Desirability: {topic}")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏–µ —Ç–µ–º—ã –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞ (–Ω–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è)
        sorted_dashboard = sorted(dashboard_scores.items(), 
                                key=lambda x: x[1], reverse=True)
        
        for topic, score in sorted_dashboard[:10]:  # –¢–æ–ø-10 –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞
            if topic not in combined_topics and score > 0.5:
                combined_topics.append(topic)
                logger.info(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ–º–∞ –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞: {topic} (–æ—Ü–µ–Ω–∫–∞: {score:.2f})")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏—à–µ–≤—ã–µ —Ç–µ–º—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
        niche_topics = [
            "growagarden", "productivitycafe", "nightreign", 
            "teenagersbutbetter", "market76", "helldivers",
            "genshin_impact_leaks", "gunaccessoriesforsale",
            "originalcharacter", "technology", "teslamotors",
            "electricvehicles", "solar", "windenergy", "climatechange"
        ]
        
        for topic in niche_topics:
            if topic not in combined_topics and len(combined_topics) < 20:
                combined_topics.append(topic)
                logger.info(f"üéØ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∏—à–µ–≤–∞—è —Ç–µ–º–∞: {topic}")
        
        return combined_topics[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 —Ç–µ–º
    
    def create_optimized_config(self, topics: List[str]) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞"""
        config = {
            "scraper_configs": [
                {
                    "scraper_id": "X.microworlds",
                    "cadence_seconds": 300,
                    "labels_to_scrape": [
                        {
                            "label_choices": topics[:10],  # –ü–µ—Ä–≤—ã–µ 10 —Ç–µ–º –¥–ª—è Twitter
                            "max_age_hint_minutes": 1440,
                            "max_data_entities": 10
                        }
                    ],
                    "config": {
                        "cookies_path": "twitter_cookies.json"
                    }
                },
                {
                    "scraper_id": "Reddit.custom",
                    "cadence_seconds": 900,  # 15 –º–∏–Ω—É—Ç
                    "labels_to_scrape": [
                        {
                            "label_choices": topics,  # –í—Å–µ —Ç–µ–º—ã –¥–ª—è Reddit
                            "max_age_hint_minutes": 1440,
                            "max_data_entities": 200
                        }
                    ],
                    "config": {
                        "subreddit": "all",
                        "limit_per_label": 100
                    }
                }
            ]
        }
        
        return config
    
    def backup_current_config(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_file, 'r') as f:
                current_config = json.load(f)
            
            with open(self.backup_file, 'w') as f:
                json.dump(current_config, f, indent=2)
            
            logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.backup_file}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
    
    def update_config(self, new_config: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            with open(self.config_file, 'w') as f:
                json.dump(new_config, f, indent=2)
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {self.config_file}")
            logger.info(f"üìã –¢–µ–º—ã: {new_config['platforms']['reddit']['labels']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def optimize_topics(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç–µ–º...")
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—à–±–æ—Ä–¥–∞
        logger.info("üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—à–±–æ—Ä–¥–∞...")
        dashboard_df = self.fetch_dashboard_data()
        dashboard_scores = self.analyze_dashboard_data(dashboard_df)
        
        # 2. –ü–æ–ª—É—á–∞–µ–º Dynamic Desirability
        logger.info("‚≠ê –ü–æ–ª—É—á–∞–µ–º Dynamic Desirability...")
        desirability_topics = self.fetch_dynamic_desirability()
        
        # 3. –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ç–µ–º—ã
        logger.info("üîÑ –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ç–µ–º—ã...")
        optimized_topics = self.combine_topics(dashboard_scores, desirability_topics)
        
        if not optimized_topics:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            return False
        
        # 4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        logger.info("‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        new_config = self.create_optimized_config(optimized_topics)
        
        # 5. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self.backup_current_config()
        
        # 6. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.update_config(new_config)
        
        logger.info(f"üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã–±—Ä–∞–Ω–æ {len(optimized_topics)} —Ç–µ–º")
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    optimizer = TopicOptimizer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    success = optimizer.optimize_topics()
    
    if success:
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞–π–Ω–µ—Ä —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
        print("2. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤")
        print("3. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 6-12 —á–∞—Å–æ–≤")
    else:
        print("\n‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

if __name__ == "__main__":
    main()
