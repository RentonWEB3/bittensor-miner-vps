#!/usr/bin/env python3.11
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–∫—Ä–∞–ø–µ—Ä–æ–≤
"""

import json
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

def test_config_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        with open('scraping_config_test.json', 'r') as f:
            config = json.load(f)
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—Ä–∞–ø–µ—Ä–æ–≤: {len(config['scraper_configs'])}")
        
        for i, scraper in enumerate(config['scraper_configs']):
            print(f"  {i+1}. {scraper['scraper_id']}")
            print(f"     –¢–µ–º—ã: {scraper['labels_to_scrape'][0]['label_choices'][:3]}...")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_pydantic_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Pydantic –º–æ–¥–µ–ª–∏"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º Pydantic –º–æ–¥–µ–ª–∏...")
    
    try:
        from scraping.config.model import ScrapingConfig
        
        with open('scraping_config_test.json', 'r') as f:
            config_data = json.load(f)
        
        config = ScrapingConfig(**config_data)
        print("‚úÖ Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –í–∞–ª–∏–¥–Ω—ã—Ö —Å–∫—Ä–∞–ø–µ—Ä–æ–≤: {len(config.scraper_configs)}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False

def test_reddit_topics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã Reddit"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã Reddit...")
    
    try:
        with open('scraping_config_test.json', 'r') as f:
            config = json.load(f)
        
        reddit_scraper = None
        for scraper in config['scraper_configs']:
            if scraper['scraper_id'] == 'Reddit.custom':
                reddit_scraper = scraper
                break
        
        if reddit_scraper:
            topics = reddit_scraper['labels_to_scrape'][0]['label_choices']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(topics)} —Ç–µ–º –¥–ª—è Reddit")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ r/ –ø—Ä–µ—Ñ–∏–∫—Å–∞
            r_prefixed = [t for t in topics if t.startswith('r/')]
            print(f"üìä –¢–µ–º —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º r/: {len(r_prefixed)}")
            
            if r_prefixed:
                print(f"   –ü—Ä–∏–º–µ—Ä—ã: {r_prefixed[:3]}")
            
            return True
        else:
            print("‚ùå Reddit —Å–∫—Ä–∞–ø–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–º Reddit: {e}")
        return False

def test_twitter_topics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã Twitter"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã Twitter...")
    
    try:
        with open('scraping_config_test.json', 'r') as f:
            config = json.load(f)
        
        twitter_scraper = None
        for scraper in config['scraper_configs']:
            if scraper['scraper_id'] == 'X.microworlds':
                twitter_scraper = scraper
                break
        
        if twitter_scraper:
            topics = twitter_scraper['labels_to_scrape'][0]['label_choices']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(topics)} —Ç–µ–º –¥–ª—è Twitter")
            print(f"   –¢–µ–º—ã: {topics}")
            
            return True
        else:
            print("‚ùå Twitter —Å–∫—Ä–∞–ø–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–º Twitter: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n")
    
    tests = [
        test_config_loading,
        test_pydantic_models,
        test_reddit_topics,
        test_twitter_topics
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
