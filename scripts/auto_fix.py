#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –º–∞–π–Ω–µ—Ä–∞ Macrocosmos
–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
"""

import argparse
import json
import sys
import subprocess
import time
from datetime import datetime
from pathlib import Path
import shutil

def run_command(command, check=True, capture_output=True):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=capture_output,
            text=True,
            timeout=60
        )
        if check and result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
            print(f"   {result.stderr}")
            return False, result.stderr
        return True, result.stdout
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
        return False, "Timeout"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False, str(e)

def check_and_fix_registration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞–π–Ω–µ—Ä–∞...")
    
    success, output = run_command("btcli subnets list --subtensor.network finney")
    if not success:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return False
    
    if "netuid: 13" in output:
        print("‚úÖ –ú–∞–π–Ω–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ–¥—Å–µ—Ç–∏ 13")
        return True
    else:
        print("‚ùå –ú–∞–π–Ω–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ–¥—Å–µ—Ç–∏ 13")
        print("üí° –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   btcli subnets register --subtensor.network finney --wallet.name YOUR_WALLET --wallet.hotkey YOUR_HOTKEY")
        return False

def check_and_fix_process():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∞–π–Ω–µ—Ä–∞...")
    
    success, output = run_command("pm2 status")
    if not success:
        print("‚ùå PM2 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    if "net13-miner" in output or "miner" in output.lower():
        print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –º–∞–π–Ω–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω")
        return True
    else:
        print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –º–∞–π–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –ó–∞–ø—É—Å–∫–∞—é –º–∞–π–Ω–µ—Ä...")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞
        success, output = run_command("pm2 start python -- ./neurons/miner.py --wallet.name your-wallet --wallet.hotkey your-hotkey")
        if success:
            print("‚úÖ –ú–∞–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä")
            return False

def check_and_fix_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db_path = Path("SqliteMinerStorage.sqlite")
    if db_path.exists():
        size_mb = db_path.stat().st_size / (1024 * 1024)
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞ ({size_mb:.1f} MB)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
        try:
            import sqlite3
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM data_entities")
            entity_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM data_entity_buckets")
            bucket_count = cursor.fetchone()[0]
            
            conn.close()
            
            print(f"   üìä –°—É—â–Ω–æ—Å—Ç–µ–π: {entity_count}")
            print(f"   üì¶ –ë–∞–∫–µ—Ç–æ–≤: {bucket_count}")
            
            if entity_count > 0:
                return True
            else:
                print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
            return False
    else:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

def check_and_fix_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    config_path = Path("scraping_config.json")
    if config_path.exists():
        try:
            with open(config_path, 'r') as f:
                config = json.load(f)
            
            scraper_configs = config.get('scraper_configs', [])
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ ({len(scraper_configs)} —Å–∫—Ä–∞–ø–µ—Ä–æ–≤)")
            
            for i, scraper in enumerate(scraper_configs):
                scraper_id = scraper.get('scraper_id', 'unknown')
                cadence = scraper.get('cadence_seconds', 0)
                print(f"   üì° –°–∫—Ä–∞–ø–µ—Ä {i+1}: {scraper_id} (–∫–∞–∂–¥—ã–µ {cadence} —Å–µ–∫)")
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    else:
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–æ–∑–¥–∞—é –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        basic_config = {
            "scraper_configs": [
                {
                    "scraper_id": "X.microworlds",
                    "cadence_seconds": 300,
                    "labels_to_scrape": [
                        {
                            "label_choices": ["bitcoin", "ethereum", "bittensor"],
                            "max_age_hint_minutes": 1440,
                            "max_data_entities": 25
                        }
                    ],
                    "config": {
                        "cookies_path": "twitter_cookies.json"
                    }
                },
                {
                    "scraper_id": "Reddit.custom",
                    "cadence_seconds": 600,
                    "labels_to_scrape": [
                        {
                            "label_choices": ["Bitcoin", "ethereum", "CryptoCurrency"],
                            "max_age_hint_minutes": 1440,
                            "max_data_entities": 100
                        }
                    ],
                    "config": {
                        "subreddit": "all",
                        "limit_per_label": 50
                    }
                }
            ]
        }
        
        try:
            with open(config_path, 'w') as f:
                json.dump(basic_config, f, indent=2)
            print("‚úÖ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

def check_and_fix_env():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    env_path = Path(".env")
    if env_path.exists():
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        with open(env_path, 'r') as f:
            env_content = f.read()
        
        required_vars = [
            "APIFY_API_TOKEN",
            "REDDIT_CLIENT_ID", 
            "REDDIT_CLIENT_SECRET",
            "REDDIT_USERNAME",
            "REDDIT_PASSWORD"
        ]
        
        missing_vars = []
        for var in required_vars:
            if var not in env_content:
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            print("üí° –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª .env")
            return False
        else:
            print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return True
    else:
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–æ–∑–¥–∞—é —à–∞–±–ª–æ–Ω .env...")
        
        env_template = """# Apify API Token
APIFY_API_TOKEN=your_apify_token_here

# Reddit API Credentials
REDDIT_CLIENT_ID=your_reddit_client_id
REDDIT_CLIENT_SECRET=your_reddit_client_secret
REDDIT_USERNAME=your_reddit_username
REDDIT_PASSWORD=your_reddit_password

# YouTube API Key (optional)
YOUTUBE_API_KEY=your_youtube_api_key

# HuggingFace Token (optional)
HUGGINGFACE_TOKEN=your_huggingface_token
"""
        
        try:
            with open(env_path, 'w') as f:
                f.write(env_template)
            print("‚úÖ –®–∞–±–ª–æ–Ω .env —Å–æ–∑–¥–∞–Ω")
            print("üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–≤–æ–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ .env: {e}")
            return False

def check_and_fix_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")
    
    log_paths = [
        Path("logs/miner.log"),
        Path("logs/neurons.log"),
        Path("miner.log")
    ]
    
    found_logs = False
    for log_path in log_paths:
        if log_path.exists():
            found_logs = True
            print(f"‚úÖ –õ–æ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã: {log_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
            try:
                with open(log_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    last_lines = lines[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
                    
                    errors = [line for line in last_lines if 'ERROR' in line]
                    warnings = [line for line in last_lines if 'WARNING' in line]
                    
                    if errors:
                        print(f"   ‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ ({len(errors)}):")
                        for error in errors[-3:]:
                            print(f"      {error.strip()}")
                    
                    if warnings:
                        print(f"   ‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warnings)}):")
                        for warning in warnings[-3:]:
                            print(f"      {warning.strip()}")
                
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
    
    if not found_logs:
        print("‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –°–æ–∑–¥–∞—é –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤...")
        
        try:
            Path("logs").mkdir(exist_ok=True)
            print("‚úÖ –ü–∞–ø–∫–∞ logs —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ logs: {e}")
    
    return True

def check_and_fix_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    required_packages = [
        "bittensor",
        "torch", 
        "numpy",
        "pandas",
        "requests",
        "flask"
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("üí° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        
        success, output = run_command("pip install -e .")
        if success:
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return False
    else:
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def restart_miner():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–π–Ω–µ—Ä
    success, output = run_command("pm2 stop net13-miner", check=False)
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    time.sleep(5)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞–π–Ω–µ—Ä
    success, output = run_command("pm2 start python -- ./neurons/miner.py --wallet.name your-wallet --wallet.hotkey your-hotkey")
    if success:
        print("‚úÖ –ú–∞–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –º–∞–π–Ω–µ—Ä–∞")
        return False

def main():
    parser = argparse.ArgumentParser(description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –º–∞–π–Ω–µ—Ä–∞ Macrocosmos")
    parser.add_argument("--fix-all", action="store_true", help="–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    parser.add_argument("--restart", action="store_true", help="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä")
    parser.add_argument("--check-only", action="store_true", help="–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å")
    
    args = parser.parse_args()
    
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –º–∞–π–Ω–µ—Ä–∞ Macrocosmos...")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = {
        'registration': check_and_fix_registration(),
        'process': check_and_fix_process(),
        'database': check_and_fix_database(),
        'config': check_and_fix_config(),
        'env': check_and_fix_env(),
        'logs': check_and_fix_logs(),
        'dependencies': check_and_fix_dependencies()
    }
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_checks = len(checks)
    passed_checks = sum(1 for result in checks.values() if result)
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò")
    print("="*50)
    
    print(f"–ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_checks}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {passed_checks}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö: {total_checks - passed_checks}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_checks/total_checks)*100:.1f}%")
    
    print("\nüìã –î–µ—Ç–∞–ª–∏:")
    for check_name, result in checks.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {check_name}")
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
    if args.fix_all and not args.check_only:
        print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º...")
        
        if not checks['dependencies']:
            print("üí° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
            check_and_fix_dependencies()
        
        if not checks['config']:
            print("üí° –°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
            check_and_fix_config()
        
        if not checks['env']:
            print("üí° –°–æ–∑–¥–∞—é .env —Ñ–∞–π–ª...")
            check_and_fix_env()
        
        if not checks['process']:
            print("üí° –ó–∞–ø—É—Å–∫–∞—é –º–∞–π–Ω–µ—Ä...")
            check_and_fix_process()
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä
    if args.restart and not args.check_only:
        restart_miner()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    if not checks['registration']:
        print("  ‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –º–∞–π–Ω–µ—Ä: btcli subnets register --subtensor.network finney")
    
    if not checks['env']:
        print("  ‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ .env")
    
    if not checks['database']:
        print("  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞–π–Ω–µ—Ä –≤ offline —Ä–µ–∂–∏–º–µ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    if not checks['process']:
        print("  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞–π–Ω–µ—Ä: pm2 start python -- ./neurons/miner.py")
    
    print("\nüåê –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("  ‚Ä¢ –î–∞—à–±–æ—Ä–¥: https://sn13-dashboard.api.macrocosmos.ai/")
    print("  ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.macrocosmos.ai/")
    print("  ‚Ä¢ Discord: https://discord.gg/bittensor")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if all(checks.values()):
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—ã—à–µ.")
        sys.exit(1)

if __name__ == "__main__":
    main()
