#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞ Macrocosmos
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
"""

import argparse
import json
import sys
from datetime import datetime
from pathlib import Path
import subprocess
import requests

def check_registration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞–π–Ω–µ—Ä–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ btcli
        result = subprocess.run(
            ['btcli', 'subnets', 'list', '--subtensor.network', 'finney'],
            capture_output=True, text=True
        )
        
        if result.returncode == 0:
            output = result.stdout
            if 'netuid: 13' in output:
                print("‚úÖ –ú–∞–π–Ω–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ–¥—Å–µ—Ç–∏ 13")
                return True
            else:
                print("‚ùå –ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–¥—Å–µ—Ç–∏ 13")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("‚ùå btcli –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Bittensor —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_process_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
    
    try:
        result = subprocess.run(
            ['pm2', 'status'],
            capture_output=True, text=True
        )
        
        if result.returncode == 0:
            output = result.stdout
            if 'net13-miner' in output or 'miner' in output.lower():
                print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –º–∞–π–Ω–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –º–∞–π–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            print("‚ùå PM2 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
    except FileNotFoundError:
        print("‚ùå PM2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db_path = Path("SqliteMinerStorage.sqlite")
        if db_path.exists():
            size_mb = db_path.stat().st_size / (1024 * 1024)
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞ ({size_mb:.1f} MB)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            import sqlite3
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM data_entities")
            entity_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM data_entity_buckets")
            bucket_count = cursor.fetchone()[0]
            
            conn.close()
            
            print(f"   üìä –°—É—â–Ω–æ—Å—Ç–µ–π: {entity_count}")
            print(f"   üì¶ –ë–∞–∫–µ—Ç–æ–≤: {bucket_count}")
            
            if entity_count > 0:
                return True
            else:
                print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
                return False
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        return False

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")
    
    try:
        log_paths = [
            Path("logs/miner.log"),
            Path("logs/neurons.log"),
            Path("miner.log")
        ]
        
        found_logs = False
        for log_path in log_paths:
            if log_path.exists():
                found_logs = True
                print(f"‚úÖ –õ–æ–≥–∏ –Ω–∞–π–¥–µ–Ω—ã: {log_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
                with open(log_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    last_lines = lines[-20:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
                    
                    errors = [line for line in last_lines if 'ERROR' in line]
                    warnings = [line for line in last_lines if 'WARNING' in line]
                    
                    if errors:
                        print(f"   ‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ ({len(errors)}):")
                        for error in errors[-3:]:
                            print(f"      {error.strip()}")
                    
                    if warnings:
                        print(f"   ‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warnings)}):")
                        for warning in warnings[-3:]:
                            print(f"      {warning.strip()}")
                
                break
        
        if not found_logs:
            print("‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤: {e}")
        return False

def check_network():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bittensor
        result = subprocess.run(
            ['btcli', 'subnets', 'list', '--subtensor.network', 'finney'],
            capture_output=True, text=True, timeout=30
        )
        
        if result.returncode == 0:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bittensor —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Bittensor")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Bittensor")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        config_path = Path("scraping_config.json")
        if config_path.exists():
            with open(config_path, 'r') as f:
                config = json.load(f)
            
            scraper_configs = config.get('scraper_configs', [])
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ ({len(scraper_configs)} —Å–∫—Ä–∞–ø–µ—Ä–æ–≤)")
            
            for i, scraper in enumerate(scraper_configs):
                scraper_id = scraper.get('scraper_id', 'unknown')
                cadence = scraper.get('cadence_seconds', 0)
                print(f"   üì° –°–∫—Ä–∞–ø–µ—Ä {i+1}: {scraper_id} (–∫–∞–∂–¥—ã–µ {cadence} —Å–µ–∫)")
            
            return True
        else:
            print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def check_dashboard():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—à–±–æ—Ä–¥–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞...")
    
    try:
        response = requests.get("https://sn13-dashboard.api.macrocosmos.ai/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ –î–∞—à–±–æ—Ä–¥ Macrocosmos –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå –î–∞—à–±–æ—Ä–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        return False

def check_diagnostic_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
    
    try:
        diagnostic_dir = Path("diagnostics")
        if diagnostic_dir.exists():
            diagnostic_files = list(diagnostic_dir.glob("diagnostic_*.json"))
            
            if diagnostic_files:
                latest_file = max(diagnostic_files, key=lambda x: x.stat().st_mtime)
                print(f"‚úÖ –§–∞–π–ª—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã ({len(diagnostic_files)} —Ñ–∞–π–ª–æ–≤)")
                
                # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
                with open(latest_file, 'r', encoding='utf-8') as f:
                    diagnostic_data = json.load(f)
                
                issues = diagnostic_data.get('issues', [])
                warnings = diagnostic_data.get('warnings', [])
                
                if issues:
                    print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã ({len(issues)}):")
                    for issue in issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"      {issue}")
                
                if warnings:
                    print(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(warnings)}):")
                    for warning in warnings[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"      {warning}")
                
                return True
            else:
                print("‚ùå –§–∞–π–ª—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        else:
            print("‚ùå –ü–∞–ø–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return False

def generate_report(results):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    print("\n" + "="*50)
    print("üìä –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("="*50)
    
    total_checks = len(results)
    passed_checks = sum(1 for result in results.values() if result)
    
    print(f"–ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_checks}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {passed_checks}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö: {total_checks - passed_checks}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_checks/total_checks)*100:.1f}%")
    
    print("\nüìã –î–µ—Ç–∞–ª–∏:")
    for check_name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {check_name}")
    
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    if not results['registration']:
        print("  ‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –º–∞–π–Ω–µ—Ä: btcli subnets register --subtensor.network finney")
    
    if not results['process']:
        print("  ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞–π–Ω–µ—Ä: pm2 start python -- ./neurons/miner.py")
    
    if not results['database']:
        print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –≤ scraping_config.json")
    
    if not results['network']:
        print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    
    if results['logs'] and 'ERROR' in str(results['logs']):
        print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    
    print("\nüåê –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:")
    print("  ‚Ä¢ –î–∞—à–±–æ—Ä–¥: https://sn13-dashboard.api.macrocosmos.ai/")
    print("  ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.macrocosmos.ai/")
    print("  ‚Ä¢ Discord: https://discord.gg/bittensor")

def main():
    parser = argparse.ArgumentParser(description="–ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞ Macrocosmos")
    parser.add_argument("--save-report", action="store_true", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª")
    
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–∞ Macrocosmos...")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    results = {
        'registration': check_registration(),
        'process': check_process_status(),
        'database': check_database(),
        'logs': check_logs(),
        'network': check_network(),
        'config': check_config(),
        'dashboard': check_dashboard(),
        'diagnostic_files': check_diagnostic_files()
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_report(results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.save_report:
        report_path = f"diagnostic_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'results': results,
                'summary': {
                    'total_checks': len(results),
                    'passed_checks': sum(1 for result in results.values() if result),
                    'success_rate': (sum(1 for result in results.values() if result) / len(results)) * 100
                }
            }, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if all(results.values()):
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—ã—à–µ.")
        sys.exit(1)

if __name__ == "__main__":
    main()
