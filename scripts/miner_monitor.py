#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–æ–º Macrocosmos
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞
"""

import argparse
import json
import time
import threading
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, Optional
import bittensor as bt
from flask import Flask, render_template, jsonify, request
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Flask
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key-here'

class MinerMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∞–π–Ω–µ—Ä–∞"""
    
    def __init__(self, config_path: str = None):
        self.config_path = config_path
        self.last_check = datetime.now()
        self.check_interval = 60  # —Å–µ–∫—É–Ω–¥—ã
        self.monitoring_data = {}
        self.is_monitoring = False
        
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring = True
        self.monitor_thread = threading.Thread(target=self._monitor_loop, daemon=True)
        self.monitor_thread.start()
        print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞–π–Ω–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring = False
        print("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞–π–Ω–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_monitoring:
            try:
                self._collect_metrics()
                time.sleep(self.check_interval)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(10)
    
    def _collect_metrics(self):
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –º–∞–π–Ω–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            diagnostic_files = list(Path("diagnostics").glob("diagnostic_*.json"))
            if diagnostic_files:
                latest_diagnostic = max(diagnostic_files, key=lambda x: x.stat().st_mtime)
                with open(latest_diagnostic, 'r', encoding='utf-8') as f:
                    diagnostic_data = json.load(f)
                
                self.monitoring_data['diagnostic'] = diagnostic_data
                self.monitoring_data['last_update'] = datetime.now().isoformat()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
            self._check_logs()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            self._check_process_status()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫: {e}")
    
    def _check_logs(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –º–∞–π–Ω–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∫ –ª–æ–≥–∞–º)
            log_path = Path("logs/miner.log")
            if log_path.exists():
                with open(log_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    last_lines = lines[-50:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫
                    
                # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
                errors = [line for line in last_lines if 'ERROR' in line or 'CRITICAL' in line]
                warnings = [line for line in last_lines if 'WARNING' in line]
                
                self.monitoring_data['logs'] = {
                    'last_lines': last_lines[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
                    'error_count': len(errors),
                    'warning_count': len(warnings),
                    'recent_errors': errors[-5:] if errors else [],
                    'recent_warnings': warnings[-5:] if warnings else []
                }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤: {e}")
    
    def _check_process_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∞–π–Ω–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ pm2
            result = requests.get("http://localhost:3000/api/processes", timeout=5)
            if result.status_code == 200:
                processes = result.json()
                miner_process = next((p for p in processes if 'miner' in p['name'].lower()), None)
                
                if miner_process:
                    self.monitoring_data['process'] = {
                        'status': miner_process['pm2_env']['status'],
                        'uptime': miner_process['pm2_env']['pm_uptime'],
                        'memory': miner_process['monit']['memory'],
                        'cpu': miner_process['monit']['cpu']
                    }
                else:
                    self.monitoring_data['process'] = {'status': 'not_found'}
            else:
                self.monitoring_data['process'] = {'status': 'pm2_unavailable'}
                
        except Exception as e:
            self.monitoring_data['process'] = {'status': 'error', 'error': str(e)}
    
    def get_status_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        if not self.monitoring_data:
            return {'status': 'no_data'}
        
        diagnostic = self.monitoring_data.get('diagnostic', {})
        process = self.monitoring_data.get('process', {})
        logs = self.monitoring_data.get('logs', {})
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        status = 'healthy'
        issues = []
        
        if diagnostic.get('issues'):
            status = 'critical'
            issues.extend(diagnostic['issues'])
        
        if process.get('status') != 'online':
            status = 'warning'
            issues.append(f"–ü—Ä–æ—Ü–µ—Å—Å: {process.get('status', 'unknown')}")
        
        if logs.get('error_count', 0) > 0:
            status = 'warning'
            issues.append(f"–û—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö: {logs['error_count']}")
        
        return {
            'status': status,
            'issues': issues,
            'last_update': self.monitoring_data.get('last_update'),
            'uptime': diagnostic.get('uptime_seconds', 0),
            'data_entities': diagnostic.get('metrics', {}).get('data', {}).get('total_entities', 0),
            'incentives': diagnostic.get('metrics', {}).get('incentives', {}).get('relative_incentive', 0)
        }

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
monitor = MinerMonitor()

@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    return render_template('dashboard.html')

@app.route('/api/status')
def get_status():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞–π–Ω–µ—Ä–∞"""
    return jsonify(monitor.get_status_summary())

@app.route('/api/metrics')
def get_metrics():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    return jsonify(monitor.monitoring_data)

@app.route('/api/diagnostic')
def run_diagnostic():
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–∞
        return jsonify({'status': 'success', 'message': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/api/restart')
def restart_miner():
    """API –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–∞"""
    try:
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ pm2
        import subprocess
        result = subprocess.run(['pm2', 'restart', 'net13-miner'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            return jsonify({'status': 'success', 'message': '–ú–∞–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω'})
        else:
            return jsonify({'status': 'error', 'message': result.stderr})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)})

@app.route('/api/logs')
def get_logs():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤"""
    try:
        log_path = Path("logs/miner.log")
        if log_path.exists():
            with open(log_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                return jsonify({
                    'status': 'success',
                    'logs': lines[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                })
        else:
            return jsonify({'status': 'error', 'message': '–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': str(e)})

def create_templates():
    """–°–æ–∑–¥–∞–Ω–∏–µ HTML —à–∞–±–ª–æ–Ω–æ–≤"""
    templates_dir = Path("templates")
    templates_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω
    dashboard_html = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞–π–Ω–µ—Ä–∞ Macrocosmos</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        .status-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .status-healthy { border-left: 5px solid #28a745; }
        .status-warning { border-left: 5px solid #ffc107; }
        .status-critical { border-left: 5px solid #dc3545; }
        .metric-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        .metric-card {
            background: white;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
        }
        .metric-label {
            color: #666;
            font-size: 14px;
        }
        .btn {
            background: #667eea;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
        }
        .btn:hover { background: #5a6fd8; }
        .btn-danger { background: #dc3545; }
        .btn-danger:hover { background: #c82333; }
        .logs {
            background: #1e1e1e;
            color: #fff;
            padding: 15px;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            max-height: 300px;
            overflow-y: auto;
        }
        .refresh-btn {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #28a745;
            color: white;
            border: none;
            padding: 10px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 18px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞–π–Ω–µ—Ä–∞ Macrocosmos</h1>
            <p>Subnet 13 - Data Universe</p>
        </div>
        
        <button class="refresh-btn" onclick="refreshData()">üîÑ</button>
        
        <div id="status-card" class="status-card">
            <h2>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
            <div id="status-content">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
        </div>
        
        <div class="metric-grid" id="metrics-grid">
            <!-- –ú–µ—Ç—Ä–∏–∫–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </div>
        
        <div class="status-card">
            <h2>–î–µ–π—Å—Ç–≤–∏—è</h2>
            <button class="btn" onclick="runDiagnostic()">üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É</button>
            <button class="btn btn-danger" onclick="restartMiner()">üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä</button>
            <button class="btn" onclick="showLogs()">üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏</button>
        </div>
        
        <div class="status-card" id="logs-section" style="display: none;">
            <h2>–õ–æ–≥–∏ –º–∞–π–Ω–µ—Ä–∞</h2>
            <div class="logs" id="logs-content"></div>
        </div>
    </div>

    <script>
        function refreshData() {
            fetch('/api/status')
                .then(response => response.json())
                .then(data => updateStatus(data));
                
            fetch('/api/metrics')
                .then(response => response.json())
                .then(data => updateMetrics(data));
        }
        
        function updateStatus(data) {
            const statusCard = document.getElementById('status-card');
            const statusContent = document.getElementById('status-content');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Å—Ç–∞—Ç—É—Å–∞
            statusCard.className = `status-card status-${data.status}`;
            
            let statusHtml = `
                <div class="metric-grid">
                    <div class="metric-card">
                        <div class="metric-value">${data.status.toUpperCase()}</div>
                        <div class="metric-label">–°—Ç–∞—Ç—É—Å</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value">${Math.round(data.uptime / 3600)}—á</div>
                        <div class="metric-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value">${data.data_entities || 0}</div>
                        <div class="metric-label">–°—É—â–Ω–æ—Å—Ç–µ–π –¥–∞–Ω–Ω—ã—Ö</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-value">${(data.incentives * 100).toFixed(2)}%</div>
                        <div class="metric-label">–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–º—É–ª—ã</div>
                    </div>
                </div>
            `;
            
            if (data.issues && data.issues.length > 0) {
                statusHtml += '<h3>–ü—Ä–æ–±–ª–µ–º—ã:</h3><ul>';
                data.issues.forEach(issue => {
                    statusHtml += `<li>${issue}</li>`;
                });
                statusHtml += '</ul>';
            }
            
            statusContent.innerHTML = statusHtml;
        }
        
        function updateMetrics(data) {
            const metricsGrid = document.getElementById('metrics-grid');
            
            if (data.diagnostic && data.diagnostic.metrics) {
                const metrics = data.diagnostic.metrics;
                let metricsHtml = '';
                
                if (metrics.data) {
                    metricsHtml += `
                        <div class="metric-card">
                            <div class="metric-value">${metrics.data.total_entities || 0}</div>
                            <div class="metric-label">–í—Å–µ–≥–æ —Å—É—â–Ω–æ—Å—Ç–µ–π</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-value">${metrics.data.total_buckets || 0}</div>
                            <div class="metric-label">–í—Å–µ–≥–æ –±–∞–∫–µ—Ç–æ–≤</div>
                        </div>
                    `;
                }
                
                if (metrics.incentives) {
                    metricsHtml += `
                        <div class="metric-card">
                            <div class="metric-value">${metrics.incentives.position || 'N/A'}</div>
                            <div class="metric-label">–ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</div>
                        </div>
                        <div class="metric-card">
                            <div class="metric-value">${metrics.incentives.total_miners || 0}</div>
                            <div class="metric-label">–í—Å–µ–≥–æ –º–∞–π–Ω–µ—Ä–æ–≤</div>
                        </div>
                    `;
                }
                
                metricsGrid.innerHTML = metricsHtml;
            }
        }
        
        function runDiagnostic() {
            fetch('/api/diagnostic')
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    setTimeout(refreshData, 2000);
                });
        }
        
        function restartMiner() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–µ—Ä?')) {
                fetch('/api/restart')
                    .then(response => response.json())
                    .then(data => {
                        alert(data.message);
                        setTimeout(refreshData, 5000);
                    });
            }
        }
        
        function showLogs() {
            fetch('/api/logs')
                .then(response => response.json())
                .then(data => {
                    const logsSection = document.getElementById('logs-section');
                    const logsContent = document.getElementById('logs-content');
                    
                    if (data.status === 'success') {
                        logsContent.innerHTML = data.logs.join('<br>');
                        logsSection.style.display = 'block';
                    } else {
                        alert(data.message);
                    }
                });
        }
        
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(refreshData, 30000);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', refreshData);
    </script>
</body>
</html>
    """
    
    with open(templates_dir / "dashboard.html", "w", encoding="utf-8") as f:
        f.write(dashboard_html)

def main():
    parser = argparse.ArgumentParser(description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞–π–Ω–µ—Ä–∞ Macrocosmos")
    parser.add_argument("--port", type=int, default=8080, help="–ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    parser.add_argument("--host", default="0.0.0.0", help="–•–æ—Å—Ç –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    parser.add_argument("--no-monitor", action="store_true", help="–ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω—ã
    create_templates()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if not args.no_monitor:
        monitor.start_monitoring()
    
    print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{args.host}:{args.port}")
    print("üìä –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host=args.host, port=args.port, debug=False)

if __name__ == "__main__":
    main()
