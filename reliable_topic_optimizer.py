#!/usr/bin/env python3.11
"""
–ù–∞–¥–µ–∂–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ç–µ–º –¥–ª—è –º–∞–π–Ω–µ—Ä–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Dynamic Desirability + —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ç–µ–º—ã –±–µ–∑ –¥–∞—à–±–æ—Ä–¥–∞
"""

import json
import requests
import logging
from typing import List, Dict, Tuple
from pathlib import Path
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ReliableTopicOptimizer:
    def __init__(self):
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è Dynamic Desirability
        self.gravity_api_url = "https://gravity.api.macrocosmos.ai/api/v1/desirable"
        
        # –°—Ç–∞—Ç–∏—á–Ω—ã–µ —Ç–µ–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ)
        self.static_topics = {
            "reddit": {
                "crypto_ai": ["r/bitcoin", "r/ethereum", "r/artificial", "r/machinelearning", "r/cryptocurrency"],
                "tech": ["r/technology", "r/programming", "r/software", "r/hardware", "r/gaming"],
                "finance": ["r/investing", "r/stocks", "r/wallstreetbets", "r/cryptocurrency", "r/trading"],
                "news": ["r/news", "r/politics", "r/worldnews", "r/science", "r/technology"],
                "entertainment": ["r/movies", "r/music", "r/gaming", "r/sports", "r/entertainment"],
                "tesla_ev": ["r/teslamotors", "r/electricvehicles", "r/teslamodel3", "r/teslamodely", "r/teslainvestorsclub"],
                "renewable": ["r/solar", "r/renewableenergy", "r/climatechange", "r/sustainability", "r/greenenergy"]
            },
            "twitter": {
                "crypto_ai": ["bitcoin", "ethereum", "ai", "artificialintelligence", "machinelearning", "crypto", "blockchain"],
                "tech": ["technology", "programming", "software", "hardware", "gaming", "esports"],
                "finance": ["investing", "stocks", "finance", "trading", "wallstreetbets", "cryptocurrency"],
                "news": ["news", "politics", "worldnews", "technology", "science"],
                "tesla_ev": ["tesla", "electricvehicles", "teslamodel3", "teslamodely", "ev"],
                "renewable": ["solar", "renewableenergy", "climatechange", "sustainability", "greenenergy"]
            }
        }

    def fetch_dynamic_desirability(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ–º Dynamic Desirability —Ç–µ–º—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º API"""
        logger.info("‚≠ê –ü–æ–ª—É—á–∞–µ–º Dynamic Desirability...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã API
            api_variants = [
                "https://gravity.api.macrocosmos.ai/api/v1/desirable",
                "https://gravity.api.macrocosmos.ai/api/desirable",
                "https://gravity.api.macrocosmos.ai/desirable",
                "https://api.gravity.macrocosmos.ai/v1/desirable"
            ]
            
            for api_url in api_variants:
                try:
                    logger.info(f"–ü—Ä–æ–±—É–µ–º API: {api_url}")
                    response = requests.get(api_url, timeout=10)
                    
                    if response.status_code == 200:
                        data = response.json()
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å {api_url}")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
                        if isinstance(data, list):
                            topics = data[:10]  # –ë–µ—Ä–µ–º —Ç–æ–ø-10
                        elif isinstance(data, dict):
                            if 'topics' in data:
                                topics = data['topics'][:10]
                            elif 'labels' in data:
                                topics = data['labels'][:10]
                            elif 'desirable' in data:
                                topics = data['desirable'][:10]
                            else:
                                # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –±–µ—Ä–µ–º –∫–ª—é—á–∏
                                topics = list(data.keys())[:10]
                        else:
                            topics = []
                        
                        if topics:
                            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(topics)} —Ç–µ–º: {topics}")
                            return topics
                            
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å {api_url}: {e}")
                    continue
                    
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Dynamic Desirability: {e}")
        
        # Fallback —Ç–µ–º—ã –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–µ–º—ã")
        return ["tesla", "ai", "crypto", "bitcoin", "technology", "electricvehicles", "solar", "renewableenergy"]

    def get_static_topics(self, platform: str, max_per_category: int = 2) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ç–µ–º—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""
        logger.info(f"üìÇ –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è {platform}...")
        
        topics = []
        platform_topics = self.static_topics.get(platform, {})
        
        for category, category_topics in platform_topics.items():
            # –ë–µ—Ä–µ–º –ø–æ 2 —Ç–µ–º—ã –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            selected = category_topics[:max_per_category]
            topics.extend(selected)
            logger.info(f"  {category}: {selected}")
        
        return topics[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º

    def combine_topics(self, desirability_topics: List[str], 
                      static_reddit: List[str], 
                      static_twitter: List[str]) -> Tuple[List[str], List[str]]:
        """–ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ç–µ–º—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        logger.info("üîÑ –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ç–µ–º—ã...")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        final_reddit = []
        final_twitter = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º Dynamic Desirability (50%)
        for topic in desirability_topics:
            # –î–ª—è Reddit –¥–æ–±–∞–≤–ª—è–µ–º r/ –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not topic.startswith('r/') and not topic.startswith('#'):
                reddit_topic = f"r/{topic}"
            else:
                reddit_topic = topic
                
            if reddit_topic not in final_reddit and len(final_reddit) < 10:
                final_reddit.append(reddit_topic)
                
            if topic not in final_twitter and len(final_twitter) < 10:
                final_twitter.append(topic)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ —Ç–µ–º—ã (50%)
        for topic in static_reddit:
            if topic not in final_reddit and len(final_reddit) < 10:
                final_reddit.append(topic)
                
        for topic in static_twitter:
            if topic not in final_twitter and len(final_twitter) < 10:
                final_twitter.append(topic)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        final_reddit = list(dict.fromkeys(final_reddit))
        final_twitter = list(dict.fromkeys(final_twitter))
        
        logger.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ Reddit —Ç–µ–º—ã: {final_reddit}")
        logger.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ Twitter —Ç–µ–º—ã: {final_twitter}")
        
        return final_reddit[:10], final_twitter[:10]

    def create_optimized_config(self, reddit_topics: List[str], twitter_topics: List[str]) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        logger.info("‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        config = {
            "scraper_configs": [
                {
                    "scraper_id": "X.microworlds",
                    "cadence_seconds": 300,  # 5 –º–∏–Ω—É—Ç
                    "labels_to_scrape": [
                        {
                            "label_choices": twitter_topics,
                            "max_age_hint_minutes": 1440,  # 24 —á–∞—Å–∞
                            "max_data_entities": 10
                        }
                    ],
                    "config": {
                        "cookies_path": "twitter_cookies.json"
                    }
                },
                {
                    "scraper_id": "Reddit.custom",
                    "cadence_seconds": 900,  # 15 –º–∏–Ω—É—Ç
                    "labels_to_scrape": [
                        {
                            "label_choices": reddit_topics,
                            "max_age_hint_minutes": 1440,  # 24 —á–∞—Å–∞
                            "max_data_entities": 200
                        }
                    ],
                    "config": {
                        "subreddit": "all",
                        "limit_per_label": 100
                    }
                }
            ]
        }
        
        return config

    def backup_current_config(self) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if Path("scraping_config_gravity.json").exists():
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_name = f"scraping_config_backup_{timestamp}.json"
                import shutil
                shutil.copy("scraping_config_gravity.json", backup_name)
                logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_name}")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

    def update_config(self, config: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open("scraping_config_optimized.json", "w") as f:
                json.dump(config, f, indent=2)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            import shutil
            shutil.copy("scraping_config_optimized.json", "scraping_config_gravity.json")
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: scraping_config_gravity.json")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

    def optimize_topics(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–¥–µ–∂–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç–µ–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        desirability_topics = self.fetch_dynamic_desirability()
        static_reddit = self.get_static_topics("reddit")
        static_twitter = self.get_static_topics("twitter")
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ç–µ–º—ã
        final_reddit, final_twitter = self.combine_topics(
            desirability_topics, static_reddit, static_twitter
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.create_optimized_config(final_reddit, final_twitter)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self.backup_current_config()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if self.update_config(config):
            logger.info("üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìã Reddit —Ç–µ–º—ã: {final_reddit}")
            logger.info(f"üìã Twitter —Ç–µ–º—ã: {final_twitter}")
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    optimizer = ReliableTopicOptimizer()
    success = optimizer.optimize_topics()
    
    if success:
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞–π–Ω–µ—Ä —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
        print("2. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-4 —á–∞—Å–æ–≤")
        print("3. –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 6-12 —á–∞—Å–æ–≤")
        print("4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç–µ–º")
        print("5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –±–µ–∑ –¥–∞—à–±–æ—Ä–¥–∞")
    else:
        print("\n‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

if __name__ == "__main__":
    main()
